<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>js</string>
		<string>jsx</string>
		<string>babel</string>
		<string>es6</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!\s*/.*\b(node|js)$\n?</string>
	<key>name</key>
	<string>JavaScript (Babel)</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#core</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#round-brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#square-brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#curly-brackets</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#special-comments-conditional-compilation</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*\*(?!/)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.documentation.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#jsdoc</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(&lt;!--|--&gt;)</string>
					<key>name</key>
					<string>comment.block.html.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(//)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>comment.line.double-slash.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^(#!).*$\n?</string>
					<key>name</key>
					<string>comment.line.shebang.js</string>
				</dict>
			</array>
		</dict>
		<key>core</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#ignore-long-lines</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flowtype-declare</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flowtype-type-aliases</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flowtype-interface</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function-labels</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-arrow-function-labels</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-labels</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-for</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-switch</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-punctuation</string>
				</dict>
			</array>
		</dict>
		<key>curly-brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.curly</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>es7-decorators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>https://github.com/wycats/javascript-decorators</string>
					<key>match</key>
					<string>(?&lt;!@)(@)([_$a-zA-Z][$\w]*)\b</string>
					<key>name</key>
					<string>tag.decorator.js</string>
				</dict>
			</array>
		</dict>
		<key>expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#ignore-long-lines</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#es7-decorators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function-labels</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-arrow-function-labels</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-arrow-function</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>after literal-function, which includes some prototype strings</string>
					<key>include</key>
					<string>#literal-prototype</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>before operators to avoid abiguities</string>
					<key>include</key>
					<string>#literal-regexp</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-number</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-quasi</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-language-constant</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-language-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-module</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-class</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-constructor</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-method-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-comma</string>
				</dict>
			</array>
		</dict>
		<key>flowtype</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#flowtype-polymorphs</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flowtype-bracketed-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flowtype-return</string>
				</dict>
			</array>
		</dict>
		<key>flowtype-bracketed-parameters</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Get parameters within a function/method call</string>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-variable</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>flowtype-class-name</key>
		<dict>
			<key>comment</key>
			<string>look for classes names but dont assume uppercase start char</string>
			<key>match</key>
			<string>(?&lt;!\.)\s*([$_\p{L}](?:[$\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Nl}\p{Pc}])*+)</string>
			<key>name</key>
			<string>entity.name.class.js</string>
		</dict>
		<key>flowtype-declare</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>\b(declare)\s+(?=(class|function|module|var))\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.declare.flowtype</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-declare-classes</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-declare-modules</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-declare-function</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-declare-vars</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>flowtype-declare-classes</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>\b(class)\s+</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.flowtype</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.class.end.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.type.extends.flowtype</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\b(extends|mixins)\b\s*</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>{</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.class.begin.js</string>
								</dict>
							</dict>
							<key>contentName</key>
							<string>meta.class.body.js</string>
							<key>end</key>
							<string>(?=})</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\b(?&lt;!\.)static\b(?!\.)</string>
									<key>name</key>
									<string>storage.modifier.js</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#literal-method</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#flowtype</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#flowtype-variable</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#comments</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#flowtype-function-name</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-class-name</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-polymorphs</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>flowtype-declare-function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>\b(function)\s+</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(;)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-function-name</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>flowtype-declare-modules</key>
		<dict>
			<key>match</key>
			<string>\bmodule\b\s+</string>
			<key>name</key>
			<string>support.type.object.module.js</string>
		</dict>
		<key>flowtype-declare-vars</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>\b(var)\s+</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.var.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-variable</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>flowtype-destruct-lhs</key>
		<dict>
			<key>comment</key>
			<string>use this pattern to colour code the variable part correctly</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-destruct-lhs</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\[</string>
					<key>end</key>
					<string>\]</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-destruct-lhs</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>string as destructor target</string>
					<key>match</key>
					<string>((['\"]).*?\k&lt;-1&gt;(?&lt;!\\.))\s*(:)\s*(([$_\p{L}](?:[$.\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Nl}\p{Pc}])*+))</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>prop name : var name as destructor target</string>
					<key>match</key>
					<string>([$_\p{L}](?:[$.\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Nl}\p{Pc}])*+)\s*(:)\s*(([$_\p{L}](?:[$.\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Nl}\p{Pc}])*+))</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.spread.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>var name as destructor target</string>
					<key>match</key>
					<string>((?&lt;!\.)\.\.\.)?([$_\p{L}](?:[$.\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Nl}\p{Pc}])*+)</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-comma</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flowtype-vars-and-props</string>
				</dict>
			</array>
		</dict>
		<key>flowtype-function-name</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.static.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.js</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\bstatic\b)?\s*([$_\p{L}][$.\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Nl}\p{Pc}]*)?\s*(?!:)(?=\(|&lt;.*\()</string>
		</dict>
		<key>flowtype-interface</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>\b(interface)\s+(?=[$_\p{L}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.interface.flowtype</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>find declare module and declare class defs</string>
					<key>end</key>
					<string>(?:(;)|\n|(}))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.terminator.statement.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.class.end.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.type.extends.flowtype</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\b(extends)\b\s*</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-interface-name</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>{</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.class.begin.js</string>
								</dict>
							</dict>
							<key>contentName</key>
							<string>meta.class.body.js</string>
							<key>end</key>
							<string>(?=})</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\b(?&lt;!\.)static\b(?!\.)</string>
									<key>name</key>
									<string>storage.modifier.js</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#flowtype</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#flowtype-variable</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#comments</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#flowtype-function-name</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>flowtype-interface-name</key>
		<dict>
			<key>comment</key>
			<string>look for interface names but dont assume uppercase start char</string>
			<key>match</key>
			<string>(?&lt;!\.)\s*([$_\p{L}](?:[$\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Nl}\p{Pc}])*+)</string>
			<key>name</key>
			<string>support.type.class.interface.js</string>
		</dict>
		<key>flowtype-object-property</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.flowtype</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.optional.parameter.flowtype</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>name of property which can be a string</string>
					<key>match</key>
					<string>((("|').*?(?&lt;=[^\\])\k&lt;-1&gt;)|([$_\p{L}](?:[$.\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Nl}\p{Pc}])*+))\s*(\??)\s*(?=:)</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flowtype-vars-and-props</string>
				</dict>
			</array>
		</dict>
		<key>flowtype-parse-array</key>
		<dict>
			<key>begin</key>
			<string>(\[)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.open.flowtype</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>arrays such as [name: string, dob: Date]</string>
			<key>end</key>
			<string>(\])</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.end.flowtype</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#flowtype-variable</string>
				</dict>
			</array>
		</dict>
		<key>flowtype-parse-objects</key>
		<dict>
			<key>applyEndPatternLast</key>
			<integer>1</integer>
			<key>begin</key>
			<string>(?&lt;=:|\||&amp;|\?)\s*(\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.open.flowtype</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>object literal flowtype  preceded by either  : | &amp; ? symbols</string>
			<key>end</key>
			<string>(\})</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.close.flowtype</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#flowtype-object-property</string>
				</dict>
			</array>
		</dict>
		<key>flowtype-parse-operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(?&lt;=\))\s*(=&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>call back with a form  ) =&gt; type</string>
					<key>end</key>
					<string>(?=.)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-parse-types</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>=(?!&gt;|=|==)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>some form of default assignment for func args</string>
					<key>end</key>
					<string>(?=,|;|\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>flowtype-parse-types</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Maybe types</string>
					<key>match</key>
					<string>\?</string>
					<key>name</key>
					<string>keyword.operator.maybe.flowtype</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\btypeof\b\s*</string>
					<key>name</key>
					<string>keyword.operator.flowtype</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.builtin.primitive.flowtype</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>primitive flowtypes</string>
					<key>match</key>
					<string>\b((?&gt;any|boolean|mixed|number|string|void))\b</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.builtin.class.flowtype</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Built-in Class Types</string>
					<key>match</key>
					<string>\b((?&gt;ArrayBuffer|ArrayBufferView|Boolean|Date|DataView|Error|EvalError|Float32Array|Float64Array|Function|Int8Array|Int16Array|Int32Array|JSON|Math|Number|Object|RangeError|ReferenceError|RegExp|String|Symbol|TypeError|Uint8Array|Uint16Array|Uint32Array|Uint8ClampedArray))\b</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flowtype-polymorphs</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.class.flowtype</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>custom Class Types e.g. Abc avoid Abc(</string>
					<key>match</key>
					<string>([$_[\p{Lu}\p{Lt}\p{Lm}\p{Lo}]][$.\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Nl}\p{Pc}]*+)(?!\s*\()</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.primitive.flowtype</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>custom primitive/var Types e.g. abc avoid abc(</string>
					<key>match</key>
					<string>([$_\p{L}][$.\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Nl}\p{Pc}]*+)(?!\s*\()</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Type Unions |</string>
					<key>match</key>
					<string>\|</string>
					<key>name</key>
					<string>kewyword.operator.union.flowtype</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>intersection of types &amp;</string>
					<key>match</key>
					<string>\&amp;</string>
					<key>name</key>
					<string>kewyword.operator.intersection.flowtype</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>as per React declares in flowtype github</string>
					<key>match</key>
					<string>\*</string>
					<key>name</key>
					<string>kewyword.operator.existential.flowtype</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-number</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flowtype-bracketed-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flowtype-parse-objects</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flowtype-parse-operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flowtype-parse-array</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
		</dict>
		<key>flowtype-polymorphs</key>
		<dict>
			<key>comment</key>
			<string>Support Bounded Polymorphism http://flowtype.org/blog/2015/03/12/Bounded-Polymorphism.html</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b((?&gt;Array|Class|Map|Promise|Set|WeakMap|WeakSet))\s*(&lt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.builtin.class.flowtype</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.flowtype</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Built-in Class Types with elements of type &lt;T&gt;</string>
					<key>end</key>
					<string>(&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.flowtype</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.type.separator.flowtype</string>
						</dict>
						<dict>
							<key>match</key>
							<string>:</string>
							<key>name</key>
							<string>punctuation.type.separator.flowtype</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-parse-types</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(&lt;)(?!&lt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctutation.flowtype</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>just the polymorph bit like this &lt;K,V&gt;(arg,arg)</string>
					<key>end</key>
					<string>(&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctutation.flowtype</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.type.separator.flowtype</string>
						</dict>
						<dict>
							<key>match</key>
							<string>:</string>
							<key>name</key>
							<string>punctuation.type.separator.flowtype</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-parse-types</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>flowtype-return</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(?&lt;=\))\s*(:)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.type.flowtype</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>maybe an issue if a object literal is returned and the start of func block isn't on same line!</string>
					<key>end</key>
					<string>(?=.)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-parse-types</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>flowtype-type-aliases</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.module.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.type.type.flowtype</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>import for types</string>
					<key>match</key>
					<string>(?&lt;!\.)\b(import)\b\s*(type)\b</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(type)\b\s+(?!(instanceof|in)\b)(?=[$_\p{L}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.type.flowtype</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>type aliases for export but avoid type instaceof or type in operators</string>
					<key>end</key>
					<string>;|\n</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.object.end.flowtype</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>=</string>
						</dict>
						<dict>
							<key>applyEndPatternLast</key>
							<integer>1</integer>
							<key>begin</key>
							<string>{</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.scope.begin.js</string>
								</dict>
							</dict>
							<key>end</key>
							<string>}</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.scope.end.js</string>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#flowtype</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#flowtype-variable</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#comments</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#flowtype-function-name</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-parse-types</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-function-name</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>flowtype-typecast</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>:</string>
					<key>end</key>
					<string>(?=\s*\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-parse-types</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>flowtype-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.spread.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.readwrite.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.optional.parameter.flowtype</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>name of variable spread var with flowtype :</string>
					<key>match</key>
					<string>((?&lt;!\.)\.\.\.)?([$_\p{L}](?:[$.\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Nl}\p{Pc}])*+)\s*(\??)\s*(?=:|=&gt;)</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flowtype-vars-and-props</string>
				</dict>
			</array>
		</dict>
		<key>flowtype-vars-and-props</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>flowtype optional arg/parameter e.g. protocol? : string</string>
					<key>match</key>
					<string>\?(?=\s*:)</string>
					<key>name</key>
					<string>punctuation.type.flowtype</string>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(:)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.type.flowtype</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>typed entity :</string>
					<key>end</key>
					<string>(?=.)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-parse-types</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-comma</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>An Iterator prefix?</string>
					<key>match</key>
					<string>@@</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(=&gt;)</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flowtype-bracketed-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flowtype-parse-array</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>ignore-long-lines</key>
		<dict>
			<key>comment</key>
			<string>so set at arbitary 1000 chars to avoid parsing minified files</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>^(?:).{1000,}</string>
				</dict>
			</array>
		</dict>
		<key>jsdoc</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>common doc @ keywords</string>
					<key>match</key>
					<string>(?&lt;!\w)@(abstract|alias|author|class|constructor|deprecated|enum|event|example|extends|fires|ignore|inheritdoc|member|method|param|private|property|protected|readonly|requires|return|since|static|throws|type|var)\b</string>
					<key>name</key>
					<string>storage.type.class.doc</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>additional jsdoc keywords</string>
					<key>match</key>
					<string>(?&lt;!\w)@(access|also|arg|arguments|augments|borrows|callback|classdesc|constant|const|constructs|copyright|default|defaultvalue|desc|description|emits|exception|exports|external|file|fileoverview|function|func|global|host|implements|inner|instance|interface|kind|lends|license|listens|memberof|mixes|mixin|module|name|namsepace|overview|prop|public|returns|see|summary|this|todo|tutorial|typedef|undocumented|variation|version|virtual)\b</string>
					<key>name</key>
					<string>storage.type.class.jsdoc</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>additional jsduck keywords</string>
					<key>match</key>
					<string>(?&lt;!\w)@(accessor|alternateClassName|aside|cfg|chainable|docauthor|evented|experimental|ftype|hide|inheritable|localdoc|markdown|mixins|new|override|preventable|ptype|removed|scss mixin|singleton|template|uses|xtype)\b</string>
					<key>name</key>
					<string>storage.type.class.jsduck</string>
				</dict>
			</array>
		</dict>
		<key>jsx</key>
		<dict>
			<key>comment</key>
			<string>Avoid &lt; operator expressions as best we can using Zertosh's regex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(?&lt;=\(|\{|\[|,|&amp;&amp;|\|\||\?|:|=|=&gt;|\Wreturn|^return|^)\s*(?=&lt;[_$a-zA-Z])</string>
					<key>end</key>
					<string>(?=.)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#jsx-tag-element-name</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>jsx-assignment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>look for attribute assignment</string>
					<key>match</key>
					<string>=(?=\s*(?:'|"|{|/\*|&lt;|//|\n))</string>
					<key>name</key>
					<string>keyword.operator.assignment.jsx</string>
				</dict>
			</array>
		</dict>
		<key>jsx-attribute-name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.jsx</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>look for attribute name</string>
					<key>match</key>
					<string>(?&lt;!\S)([$_\p{L}](?:[$.\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Nl}\p{Pc}-](?&lt;!\.\.))*+)(?&lt;!\.)(?=//|/\*|=|\s|&gt;|/&gt;)</string>
				</dict>
			</array>
		</dict>
		<key>jsx-entities</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.character.entity.jsx</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.entity.jsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.html.jsx</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.entity.jsx</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Embeded HTML entities &amp;blah</string>
					<key>match</key>
					<string>(&amp;)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Entity with &amp; and invalid name</string>
					<key>match</key>
					<string>&amp;\S*;</string>
					<key>name</key>
					<string>invalid.illegal.bad-ampersand.jsx</string>
				</dict>
			</array>
		</dict>
		<key>jsx-evaluated-code</key>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.embedded.begin.jsx</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>source.js.jsx</string>
			<key>end</key>
			<string>}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.embedded.end.jsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.embedded.expression.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-string-double-quoted</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-string-single-quoted</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-spread-attribute</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>jsx-spread-attribute</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Spread attribute { ... AssignmentExpression }</string>
					<key>match</key>
					<string>(?&lt;!\.)\.\.\.</string>
					<key>name</key>
					<string>keyword.operator.spread.jsx</string>
				</dict>
			</array>
		</dict>
		<key>jsx-string-double-quoted</key>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.jsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"(?&lt;!\\")</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.jsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-entities</string>
				</dict>
			</array>
		</dict>
		<key>jsx-string-single-quoted</key>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.jsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'(?&lt;!\\')</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.jsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-entities</string>
				</dict>
			</array>
		</dict>
		<key>jsx-tag-attributes</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-attribute-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-assignment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-string-double-quoted</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-string-single-quoted</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-evaluated-code</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-tag-element-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
		</dict>
		<key>jsx-tag-element-name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(&lt;)([$_\p{L}](?:[$.:\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Nl}\p{Pc}-](?&lt;!\.\.))*+)(?=[/&gt;\s])(?&lt;![\.:])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.jsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.open.jsx</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Tags that end &gt; are trapped in #jsx-tag-termination</string>
					<key>end</key>
					<string>(?&lt;=&lt;/)(\2)(&gt;)|(/&gt;)|((?&lt;=&lt;/)[\S ]*?)&gt;</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.close.jsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.jsx</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.jsx</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.termination.jsx</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.tag.jsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#jsx-tag-termination</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#jsx-tag-attributes</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>jsx-tag-termination</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.jsx</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>JSXStartTagEnd</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>uses non consuming search for &lt;/ in &lt;/tag&gt;</string>
					<key>end</key>
					<string>(&lt;/)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.jsx</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>JSXEndTagStart</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#jsx-evaluated-code</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#jsx-entities</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#jsx-tag-element-name</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-arrow-function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(\basync\b)?\s*(?=(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?\s*(\((?:(?&gt;[^()]+)|\g&lt;-1&gt;)*\))\s*(?:\s*(:|\|)(\s*[$_a-zA-Z0-9]+(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?|\s*(\{(?:(?&gt;[^{}]+)|\g&lt;-1&gt;)*\})|\s*(((')((?:[^']|\\')*)('))|\s*((")((?:[^"]|\\")*)(")))|\s*[x0-9A-Fa-f]+))*\s*=&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. (args) =&gt; { }</string>
					<key>end</key>
					<string>(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\basync\b)?\s*(?=(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?\s*([_$a-zA-Z][$\w]*)\s*(?:\s*(:|\|)(\s*[$_a-zA-Z0-9]+(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?|\s*(\{(?:(?&gt;[^{}]+)|\g&lt;-1&gt;)*\})|\s*(((')((?:[^']|\\')*)('))|\s*((")((?:[^"]|\\")*)(")))|\s*[x0-9A-Fa-f]+))*\s*=&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. arg =&gt; { }</string>
					<key>end</key>
					<string>(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-polymorphs</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-variable</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(\b[_$a-zA-Z][$\w]*)\s*(=)\s*(\basync\b)?\s*(?=(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?\s*(\((?:(?&gt;[^()]+)|\g&lt;-1&gt;)*\))\s*(?:\s*(:|\|)(\s*[$_a-zA-Z0-9]+(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?|\s*(\{(?:(?&gt;[^{}]+)|\g&lt;-1&gt;)*\})|\s*(((')((?:[^']|\\')*)('))|\s*((")((?:[^"]|\\")*)(")))|\s*[x0-9A-Fa-f]+))*\s*=&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. play = (args) =&gt; { }</string>
					<key>end</key>
					<string>(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\b[_$a-zA-Z][$\w]*)\s*(=)\s*(\basync\b)?\s*(?=(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?\s*([_$a-zA-Z][$\w]*)\s*(?:\s*(:|\|)(\s*[$_a-zA-Z0-9]+(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?|\s*(\{(?:(?&gt;[^{}]+)|\g&lt;-1&gt;)*\})|\s*(((')((?:[^']|\\')*)('))|\s*((")((?:[^"]|\\")*)(")))|\s*[x0-9A-Fa-f]+))*\s*=&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. play = arg =&gt; { }</string>
					<key>end</key>
					<string>(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-polymorphs</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-variable</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(\b[A-Z][$\w]*)?(\.)(prototype)(\.)([_$a-zA-Z][$\w]*)\s*(=)\s*(\basync\b)?\s*(?=(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?\s*(\((?:(?&gt;[^()]+)|\g&lt;-1&gt;)*\))\s*(?:\s*(:|\|)(\s*[$_a-zA-Z0-9]+(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?|\s*(\{(?:(?&gt;[^{}]+)|\g&lt;-1&gt;)*\})|\s*(((')((?:[^']|\\')*)('))|\s*((")((?:[^"]|\\")*)(")))|\s*[x0-9A-Fa-f]+))*\s*=&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Sound.prototype.play = (args) =&gt; { }</string>
					<key>end</key>
					<string>(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.prototype.function.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\b_?[A-Z][$\w]*)?(\.)(prototype)(\.)([_$a-zA-Z][$\w]*)\s*(=)\s*(\basync\b)?\s*(?=(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?\s*([_$a-zA-Z][$\w]*)\s*(?:\s*(:|\|)(\s*[$_a-zA-Z0-9]+(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?|\s*(\{(?:(?&gt;[^{}]+)|\g&lt;-1&gt;)*\})|\s*(((')((?:[^']|\\')*)('))|\s*((")((?:[^"]|\\")*)(")))|\s*[x0-9A-Fa-f]+))*\s*=&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. Sound.prototype.play = arg =&gt; { }</string>
					<key>end</key>
					<string>(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.prototype.function.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-polymorphs</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-variable</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(\b_?[A-Z][$\w]*)?(\.)([_$a-zA-Z][$\w]*)\s*(=)\s*(\basync\b)?\s*(?=(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?\s*(\((?:(?&gt;[^()]+)|\g&lt;-1&gt;)*\))\s*(?:\s*(:|\|)(\s*[$_a-zA-Z0-9]+(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?|\s*(\{(?:(?&gt;[^{}]+)|\g&lt;-1&gt;)*\})|\s*(((')((?:[^']|\\')*)('))|\s*((")((?:[^"]|\\")*)(")))|\s*[x0-9A-Fa-f]+))*\s*=&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. Sound.play = (args) =&gt; { }</string>
					<key>end</key>
					<string>(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.static.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\b_?[A-Z][$\w]*)?(\.)([_$a-zA-Z][$\w]*)\s*(=)\s*(\basync\b)?\s*(?=(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?\s*([_$a-zA-Z][$\w]*)\s*(?:\s*(:|\|)(\s*[$_a-zA-Z0-9]+(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?|\s*(\{(?:(?&gt;[^{}]+)|\g&lt;-1&gt;)*\})|\s*(((')((?:[^']|\\')*)('))|\s*((")((?:[^"]|\\")*)(")))|\s*[x0-9A-Fa-f]+))*\s*=&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. Sound.play = arg =&gt; { }</string>
					<key>end</key>
					<string>(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.static.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-polymorphs</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-variable</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-arrow-function-labels</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(\b[_$a-zA-Z][$\w]*)\s*(:)\s*(\basync\b)?\s*(?=(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?\s*(\((?:(?&gt;[^()]+)|\g&lt;-1&gt;)*\))\s*(?:\s*(:|\|)(\s*[$_a-zA-Z0-9]+(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?|\s*(\{(?:(?&gt;[^{}]+)|\g&lt;-1&gt;)*\})|\s*(\s*(["']).*?\k&lt;-1&gt;(?&lt;!\\.))|\s*[x0-9A-Fa-f]+))*\s*=&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. play: async &lt;T&gt;(args) =&gt; { }</string>
					<key>end</key>
					<string>(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.json.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\b[_$a-zA-Z][$\w]*)\s*(:)\s*(\basync\b)?\s*(?=(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?\s*([_$a-zA-Z][$\w]*)\s*(?:\s*(:|\|)(\s*[$_a-zA-Z0-9]+(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?|\s*(\{(?:(?&gt;[^{}]+)|\g&lt;-1&gt;)*\})|\s*(\s*(["']).*?\k&lt;-1&gt;(?&lt;!\\.))|\s*[x0-9A-Fa-f]+))*\s*=&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. play: arg =&gt; { }</string>
					<key>end</key>
					<string>(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.json.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-polymorphs</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-variable</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(('|\")(\b[_$a-zA-Z][$\w]*)(\k&lt;2&gt;))\s*(:)\s*(\basync\b)?\s*(?=(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?\s*(\((?:(?&gt;[^()]+)|\g&lt;-1&gt;)*\))\s*(?:\s*(:|\|)(\s*[$_a-zA-Z0-9]+(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?|\s*(\{(?:(?&gt;[^{}]+)|\g&lt;-1&gt;)*\})|\s*(\s*(["']).*?\k&lt;-1&gt;(?&lt;!\\.))|\s*[x0-9A-Fa-f]+))*\s*=&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. 'play': (args) =&gt; { }</string>
					<key>end</key>
					<string>(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.json.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(('|\")(\b[_$a-zA-Z][$\w]*)(\k&lt;2&gt;))\s*(:)\s*(\basync\b)?\s*(?=(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?\s*([_$a-zA-Z][$\w]*)\s*(?:\s*(:|\|)(\s*[$_a-zA-Z0-9]+(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?|\s*(\{(?:(?&gt;[^{}]+)|\g&lt;-1&gt;)*\})|\s*(\s*(["']).*?\k&lt;-1&gt;(?&lt;!\\.))|\s*[x0-9A-Fa-f]+))*\s*=&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. 'play': arg =&gt; { }</string>
					<key>end</key>
					<string>(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.json.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-polymorphs</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-variable</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-class</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)\b(class)\s+</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.class.js</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Classes</string>
					<key>end</key>
					<string>(})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.class.end.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.class.extends.js</string>
								</dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.type.extends.js</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\s*\b(extends)\b\s*</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-class-name</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-polymorphs</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>{</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.class.begin.js</string>
								</dict>
							</dict>
							<key>contentName</key>
							<string>meta.class.body.js</string>
							<key>end</key>
							<string>(?=})</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\b(?&lt;!\.)static\b(?!\.)</string>
									<key>name</key>
									<string>storage.modifier.js</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#literal-method</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#brackets</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#es7-decorators</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#comments</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#flowtype-variable</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#literal-semi-colon</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-comma</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>meta.delimiter.comma.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-constructor</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(new)\s+(?=[_$a-zA-Z][$\w.]*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.new.js</string>
						</dict>
					</dict>
					<key>disabled</key>
					<integer>1</integer>
					<key>end</key>
					<string>(?![_$a-zA-Z][$\w.]*)</string>
					<key>name</key>
					<string>meta.instance.constructor</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#support</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>entity.name.type.new.js</string>
								</dict>
							</dict>
							<key>match</key>
							<string>([_$a-zA-Z][$\w.]*\.)?([_$a-zA-Z][$\w]*)</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-for</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)\b(for)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.loop.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.for.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\(</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.brace.round.js</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#literal-keyword-storage</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#expression</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#literal-punctuation</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(?:\b(async)\b\s+)?\s*(\bfunction\b)\s*(\*?)\s*([_$a-zA-Z][$\w]*)?\s*(?=\(|&lt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. function play&lt;T&gt;(arg1, arg2) { }</string>
					<key>end</key>
					<string>(?=\s*\{)</string>
					<key>name</key>
					<string>meta.function.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(\b[_$a-zA-Z][$\w]*)\s*(=)\s*(?:(async)\s+)?\s*(\bfunction\b)\s*(\*?)\s*([_$a-zA-Z][$\w]*)?\s*(?=\(|&lt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. play = function(arg1, arg2) { }</string>
					<key>end</key>
					<string>(?=\s*\{)</string>
					<key>name</key>
					<string>meta.function.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(\b_?[A-Z][$\w]*)?(\.)(prototype)(\.)([_$a-zA-Z][$\w]*)\s*(=)\s*(?:(async)\s+)?\s*(\bfunction\b)\s*(\*?)\s*([_$a-zA-Z][$\w]*)?\s*(?=\(|&lt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.js</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.js</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. Sound.prototype.play = function(arg1, arg2) { }</string>
					<key>end</key>
					<string>(?=\s*\{)</string>
					<key>name</key>
					<string>meta.prototype.function.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(\b_?[A-Z][$\w]*)?(\.)([_$a-zA-Z][$\w]*)\s*(=)\s*(?:(async)\s+)?\s*(\bfunction\b)\s*(\*?)\s*([_$a-zA-Z][$\w]*)?\s*(?=\(|&lt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.js</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. Sound.play = function(arg1, arg2) { }</string>
					<key>end</key>
					<string>(?=\s*\{)</string>
					<key>name</key>
					<string>meta.function.static.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-function-call</key>
		<dict>
			<key>comment</key>
			<string>maybe in array form e.g. foo[bar]()</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>([_$a-zA-Z][$\w]*)\s*(?=\(\s*\))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.function-call.without-arguments.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-bracketed-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(?=(\[(?:(?&gt;[^\[\]]+)|\g&lt;-1&gt;)*\])\s*\(\s*\))</string>
					<key>end</key>
					<string>(?=.)</string>
					<key>name</key>
					<string>meta.function-call.without-arguments.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-parse-array</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-bracketed-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>([_$a-zA-Z][$\w]*)\s*(?=\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.)</string>
					<key>name</key>
					<string>meta.function-call.with-arguments.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-bracketed-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(?=(\[(?:(?&gt;[^\[\]]+)|\g&lt;-1&gt;)*\])\s*\()</string>
					<key>end</key>
					<string>(?=.)</string>
					<key>name</key>
					<string>meta.function-call.without-arguments.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-parse-array</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-bracketed-parameters</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-function-labels</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>([_$a-zA-Z][$\w]*)\s*(:)\s*(?:(async)\s+)?\s*(\bfunction\b)\s*(?:(\*)\s*)?\s*(?=\(|&lt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. play: function(arg1, arg2) { }</string>
					<key>end</key>
					<string>(?=\{)</string>
					<key>name</key>
					<string>meta.function.json.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(('|\")(\b[_$a-zA-Z][$\w]*)(\k&lt;2&gt;))\s*(:)\s*(async)?\s+(\bfunction\b)\s*(\*\s*)?\s*(?=\(|&lt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.js</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. 'play': function(arg1, arg2) { }</string>
					<key>end</key>
					<string>(?=\{)</string>
					<key>name</key>
					<string>meta.function.json.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-keyword-storage</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)\b(const|let|var)\b\s+(?=[$_\p{L}](?:[$\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Nl}\p{Pc}-]*+\s*:))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>these statements must end in a ;</string>
					<key>end</key>
					<string>\;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.terminator.statement.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-variable</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)\b(const|let|var)\b\s+(?=(\{(?:(?&gt;[^{}]+)|\g&lt;-1&gt;)*\})\s*:)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>these statements must end in a ;</string>
					<key>end</key>
					<string>\;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.terminator.statement.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-destruct-lhs</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)\b(const|let|var)\b\s+(?=(\[(?:(?&gt;[^\[\]]+)|\g&lt;-1&gt;)*\])\s*:)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>these statements must end in a ;</string>
					<key>end</key>
					<string>\;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.terminator.statement.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-destruct-lhs</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>var statements that done start with a flow indicator</string>
					<key>match</key>
					<string>(?&lt;!\.)\b(const|let|var)\b</string>
					<key>name</key>
					<string>storage.type.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#literal-keyword-storage</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.flow.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(yield)\b(?:\s*(\*))?</string>
					<key>name</key>
					<string>keyword.control.flow.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(await|return)\b</string>
					<key>name</key>
					<string>keyword.control.flow.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(if|else)\b</string>
					<key>name</key>
					<string>keyword.control.conditional.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(catch|finally|throw|try)\b</string>
					<key>name</key>
					<string>keyword.control.trycatch.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(break|continue|do|goto|while)\b</string>
					<key>name</key>
					<string>keyword.control.loop.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-labels</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.other.object.key.js</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>string as a property name</string>
					<key>match</key>
					<string>(?&lt;!\.|\?|\?\s|\?\s\s)(((\")(\\.|[^\\"])*(\"))|((')(\\.|[^\\'])*(')))\s*(:)</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.|\?|\?\s|\?\s\s)(\[)(?=(?:[^\[]+)*?\]\s*(:)(?=\s*\S))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.square.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>[something] : as  property name</string>
					<key>end</key>
					<string>(\])\s*(:)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.square.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.|\?|\?\s|\?\s\s)([_$a-zA-Z][$\w]*)\s*(:)</string>
					<key>name</key>
					<string>constant.other.object.key.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-language-constant</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\btrue\b</string>
					<key>name</key>
					<string>constant.language.boolean.true.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\bfalse\b</string>
					<key>name</key>
					<string>constant.language.boolean.false.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\bnull\b</string>
					<key>name</key>
					<string>constant.language.null.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\bundefined\b</string>
					<key>name</key>
					<string>constant.language.undefined.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\bNaN\b</string>
					<key>name</key>
					<string>constant.language.nan.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-language-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!(?&lt;!\.\.)\.)\b(arguments)\b</string>
					<key>name</key>
					<string>variable.language.arguments.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!(?&lt;!\.\.)\.)\b(super)\b\s*(?!\()</string>
					<key>name</key>
					<string>variable.language.super.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!(?&lt;!\.\.)\.)\b(this)\b</string>
					<key>name</key>
					<string>variable.language.this.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!(?&lt;!\.\.)\.)\b(self)\b\s*(?!\()</string>
					<key>name</key>
					<string>variable.language.self.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)\b(__proto__)\b</string>
					<key>name</key>
					<string>variable.language.proto.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)\b(constructor)\b\s*(?!\()</string>
					<key>name</key>
					<string>variable.language.constructor.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)\b(prototype)\b</string>
					<key>name</key>
					<string>variable.language.prototype.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-method</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(\bstatic\b)?\s*(\basync\b)?\s*(\*?)\s*(?&lt;!\.)([_$a-zA-Z][$\w]*)\s*(?=(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?(\())</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.method.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. play&lt;T,T&gt;(arg1, arg2): Type&lt;T&gt; { }</string>
					<key>end</key>
					<string>(?=.)</string>
					<key>name</key>
					<string>meta.function.method.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(\bstatic\b)?\s*(\basync\b)?\s*(\*?)\s*(?=((\[(?:(?&gt;[^\[\]]+)|\g&lt;-1&gt;)*\])|\s*(((')((?:[^']|\\')*)('))|\s*((")((?:[^"]|\\")*)("))))\s*(&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?\s*(\())</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.method.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.method.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. [var]&lt;T,T&gt;(arg1, arg2): Type&lt;T&gt; { } or 'var'&lt;T,T&gt;(arg1, arg2)</string>
					<key>end</key>
					<string>(?=.)</string>
					<key>name</key>
					<string>meta.function.method.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-parse-array</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#literal-string</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>\b(?:(static)\s+)?(get|set)\s+([_$a-zA-Z][$\w]*)\s*(?=\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.static.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.accessor.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>getter/setter</string>
					<key>end</key>
					<string>(?={)</string>
					<key>name</key>
					<string>meta.accessor.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>\b(?:(static)\s+)?(get|set)\s+(?=((\[(?:(?&gt;[^\[\]]+)|\g&lt;-1&gt;)*\])|\s*(((')((?:[^']|\\')*)('))|\s*((")((?:[^"]|\\")*)("))))\s*(\())</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.static.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.accessor.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>getter/setter set [var]() or get 'name'()</string>
					<key>end</key>
					<string>(?={)</string>
					<key>name</key>
					<string>meta.accessor.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-parse-array</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#literal-string</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-method-call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.group.braces.round.function.arguments.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g Abc.aaa()</string>
					<key>match</key>
					<string>(?:(?&lt;=\.)|\b)([A-Z][$\w]*)\s*(\.)([_$a-zA-Z][$\w]*)\s*(\(\s*\))</string>
					<key>name</key>
					<string>meta.function-call.static.without-arguments.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?:(?&lt;=\.)|\b)\s*([A-Z][$\w]*)\s*(\.)([_$a-zA-Z][$\w]*)\s*(?=\()</string>
					<key>name</key>
					<string>meta.function-call.static.with-arguments.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.group.braces.round.function.arguments.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;=\.)\s*([_$a-zA-Z][$\w]*)\s*(\(\s*\))</string>
					<key>name</key>
					<string>meta.function-call.method.without-arguments.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;=\.)([_$a-zA-Z][$\w]*)\s*(?=\()</string>
					<key>name</key>
					<string>meta.function-call.method.with-arguments.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-module</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(import|export|default)\b</string>
					<key>name</key>
					<string>keyword.control.module.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(from|as)\b</string>
					<key>name</key>
					<string>keyword.control.module.reference.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-number</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.numeric.hex.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>((?i)(?:\B[-+]|\b)0x[0-9a-f]*\.(\B|\b[0-9]+))</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.numeric.octal.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>((?:\B[-+]|\b)0[0-9]+\.(\B|\b[0-9]+))</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>((?:\B[-+])?(?:\b0b[0-1]*|\b0o[0-7]*|\b0x[0-9a-f]*|(\B\.[0-9]+|\b[0-9]+(\.[0-9]*)?)(e[-+]?[0-9]+)?))</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.language.infinity.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>((?:\B[-+]|\b)(Infinity)\b)</string>
				</dict>
			</array>
		</dict>
		<key>literal-operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(delete|in|instanceof|new|of|typeof|void|with)\b</string>
					<key>name</key>
					<string>keyword.operator.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(!(?!=)|&amp;&amp;|\|\|)</string>
					<key>name</key>
					<string>keyword.operator.logical.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(=(?!=))</string>
					<key>name</key>
					<string>keyword.operator.assignment.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(%=|&amp;=|\*=|\+=|-=|/=|\^=|\|=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=)</string>
					<key>name</key>
					<string>keyword.operator.assignment.augmented.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(~|&lt;&lt;|&gt;&gt;&gt;|&gt;&gt;|&amp;|\^|\|)</string>
					<key>name</key>
					<string>keyword.operator.bitwise.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(&lt;=|&gt;=|&lt;|&gt;)</string>
					<key>name</key>
					<string>keyword.operator.relational.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(===|!==|==|!=)</string>
					<key>name</key>
					<string>keyword.operator.comparison.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(--|\+\+|/(?!/|\*)|%|\*(?&lt;!/\*)|\+|-)</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\?)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.ternary.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>ternary operator - make sure end : is consumed to avoid mistake as flow type</string>
					<key>end</key>
					<string>(:)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.ternary.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\.\.\.</string>
					<key>name</key>
					<string>keyword.operator.spread.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.</string>
					<key>name</key>
					<string>keyword.operator.accessor.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-prototype</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. Sound.prototype</string>
					<key>match</key>
					<string>([_$a-zA-Z][$\w]*)(\.)(prototype)\b</string>
					<key>name</key>
					<string>meta.prototype.access.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. Sound.prototype = { }</string>
					<key>match</key>
					<string>([_$a-zA-Z][$\w]*)(\.)(prototype)\s*=\s*</string>
					<key>name</key>
					<string>meta.prototype.declaration.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-punctuation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#literal-semi-colon</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-comma</string>
				</dict>
			</array>
		</dict>
		<key>literal-quasi</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>([a-zA-Z$_][\w$_]*)?(`)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.quasi.tag.name.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.quasi.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;!\\)`</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.quasi.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quasi.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?&lt;!\\)\${</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.quasi.element.begin.js</string>
								</dict>
							</dict>
							<key>end</key>
							<string>}</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.quasi.element.end.js</string>
								</dict>
							</dict>
							<key>name</key>
							<string>entity.quasi.element.js</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#expression</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#string-content</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-regexp</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;=\.|\(|,|{|}|\[|;|,|&lt;|&gt;|&lt;=|&gt;=|==|!=|===|!==|\+|-|\*|%|\+\+|--|&lt;&lt;|&gt;&gt;|&gt;&gt;&gt;|&amp;|\||\^|!|~|&amp;&amp;|\|\||\?|:|=|\+=|-=|\*=|%=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|&amp;=|\|=|\^=|/|/=|\Wnew|\Wdelete|\Wvoid|\Wtypeof|\Winstanceof|\Win|\Wdo|\Wreturn|\Wcase|\Wthrow|^new|^delete|^void|^typeof|^instanceof|^in|^do|^return|^case|^throw|^)\s*(/)(?!/|\*|$)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(/)([gimy]*)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.regexp.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.regexp.babel</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-semi-colon</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\;</string>
					<key>name</key>
					<string>punctuation.terminator.statement.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(('))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>string.quoted.single.js</string>
					<key>end</key>
					<string>(('))|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.newline.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-content</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(("))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>string.quoted.double.js</string>
					<key>end</key>
					<string>(("))|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.newline.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-content</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-switch</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)\b(switch)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.switch.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.curly.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.switch.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#round-brackets</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\{</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.brace.curly.js</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=})</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>(?&lt;!\.)\b(case|default)\b</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>keyword.control.switch.js</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(:)</string>
									<key>endCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.js</string>
										</dict>
									</dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#expression</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>e.g. CONSTANT</string>
					<key>match</key>
					<string>[A-Z][_$\dA-Z]*\b</string>
					<key>name</key>
					<string>variable.other.constant.js</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>e.g. dollar vars</string>
					<key>match</key>
					<string>\$[$\w]*</string>
					<key>name</key>
					<string>variable.other.dollar.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.static.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. Class.property</string>
					<key>match</key>
					<string>\b([A-Z][$\w]*)\s*(\.)([_$a-zA-Z][$\w]*)</string>
					<key>name</key>
					<string>meta.property.class.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.object.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. obj.property</string>
					<key>match</key>
					<string>(?&lt;!\.)[_$a-zA-Z][$\w]*\s*(?=[\[\.])</string>
					<key>name</key>
					<string>variable.other.object.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>e.g. obj.property</string>
					<key>match</key>
					<string>(?&lt;=\.)\s*[_$a-zA-Z][$\w]*</string>
					<key>name</key>
					<string>meta.property.object.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[_$a-zA-Z][$\w]*</string>
					<key>name</key>
					<string>variable.other.readwrite.js</string>
				</dict>
			</array>
		</dict>
		<key>round-brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(^|:|;|=|(?&lt;=:|;|=))\s*(\((?=(("|').*?(?&lt;=[^\\])\k&lt;-1&gt;|[^?:])*(:|\?\s*:)))</string>
					<key>beginCaptures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>try to avoid ternary operators which have a '? some chars :'</string>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.round</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-typecast</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.round</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>special-comments-conditional-compilation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*(?=@)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.conditional.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.keyword.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.conditional.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>/\*</string>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.keyword.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?!@)(@)(if|elif|else|end|ifdef|endif|cc_on|set)\b</string>
					<key>name</key>
					<string>keyword.control.conditional.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?!@)(@)(_win32|_win16|_mac|_alpha|_x86|_mc680x0|_PowerPC|_jscript|_jscript_build|_jscript_version|_debug|_fast|[a-zA-Z]\w+)</string>
					<key>name</key>
					<string>variable.other.conditional.js</string>
				</dict>
			</array>
		</dict>
		<key>square-brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\[</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.square.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\]</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.square.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.square</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string-content</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\s*\n</string>
					<key>name</key>
					<string>constant.character.escape.newline.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\['|"|\\|n|r|t|b|f|v|0]</string>
					<key>name</key>
					<string>constant.character.escape</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\u((\{[0-9a-fA-F]+\})|[0-9a-fA-F]{4})</string>
					<key>name</key>
					<string>constant.character.escape</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\x[0-9a-fA-F]{2}</string>
					<key>name</key>
					<string>constant.character.escape</string>
				</dict>
			</array>
		</dict>
		<key>support</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(Array|ArrayBuffer|Boolean|DataView|Date|Float(32|64)Array|Int(8|16|32)Array|Function|GeneratorFunction|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|Uint(8|16|32)Array|Uint8ClampedArray|WeakMap|WeakSet)\b</string>
					<key>name</key>
					<string>support.class.builtin.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|isFinite|isNaN|parseFloat|parseInt|unescape)\b</string>
					<key>name</key>
					<string>support.function.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)(shift|sort|splice|unshift|pop|push|reverse)\b</string>
					<key>name</key>
					<string>support.function.mutator.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b((Eval|Range|Reference|Syntax|Type|URI)?Error)\b</string>
					<key>name</key>
					<string>support.class.error.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(debugger)\b</string>
					<key>name</key>
					<string>keyword.other.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(document|window)\b</string>
					<key>name</key>
					<string>support.type.object.dom.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR)\b</string>
					<key>name</key>
					<string>support.constant.dom.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.object.console.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.function.console.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(console)(?:(\.)(warn|info|log|error|time|timeEnd|assert))?\b</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.object.process.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.type.object.process.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(process)(?:(\.)(stdout|stderr|stdin|argv|execPath|execArgv|env|exitCode|version|versions|config|pid|title|arch|platform|mainModule))?\b</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.object.process.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.function.process.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(process)(?:(\.)(abort|chdir|cwd|exit|getgid|setgid|getuid|setuid|setgroups|getgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime))?\b</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.object.module.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.type.object.module.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(((?&lt;!\.)module\.((?&lt;!\,)exports|id|require|parent|filename|loaded|children)|exports))\b</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(global|GLOBAL|root|__dirname|__filename)\b</string>
					<key>name</key>
					<string>support.type.object.node.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\b</string>
					<key>name</key>
					<string>support.class.node.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>{{</string>
					<key>end</key>
					<string>}}</string>
					<key>name</key>
					<string>meta.tag.mustache.js</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.js.jsx</string>
	<key>uuid</key>
	<string>F9FC2039-25E9-4810-9A6B-C2A9FFD41AE8</string>
</dict>
</plist>
